# Task ID: 5
# Title: Results Cache and Persistence System
# Status: done
# Dependencies: 3
# Priority: medium
# Description: Implement persistent storage of test results to support incremental reruns
# Details:
Create cache.py module to handle .moltest_cache.json file in project root. Store scenario results as JSON with format: {'moltest_version': '1.0.0', 'last_run': 'timestamp', 'scenarios': {'role:scenario': 'passed/failed'}}. Implement atomic file writes using temp file + rename. Add cache validation and corruption handling. Support --rerun-failed by filtering discovered scenarios against cached failures. Include cache clearing functionality.

# Test Strategy:
Test cache file creation, reading, and updating. Verify atomic writes prevent corruption. Test --rerun-failed with various cache states including missing/corrupted files.

# Subtasks:
## 1. Create Cache Data Structure and File Format [done]
### Dependencies: None
### Description: Define the cache data structure and file format for storing test results
### Details:
Create a new cache.py module that defines the structure of the cache data. Implement functions to initialize an empty cache with the format {'moltest_version': '1.0.0', 'last_run': 'timestamp', 'scenarios': {'role:scenario': 'passed/failed'}}. Define helper functions for serializing and deserializing the cache to/from JSON. Include validation for the cache structure to ensure it matches the expected format.

## 2. Implement Atomic File Operations [done]
### Dependencies: None
### Description: Create functions for safely reading and writing the cache file
### Details:
Implement functions to read the cache file from disk and write to it atomically. Use a temporary file and rename approach to ensure atomic writes. Handle file not found errors when reading by initializing a new cache. Include error handling for permission issues, disk full scenarios, and other IO exceptions. The cache file should be named '.moltest_cache.json' and stored in the project root.

## 3. Implement Cache Update and Query Functions [done]
### Dependencies: None
### Description: Create functions to update the cache with test results and query the cache
### Details:
Implement functions to update the cache with test results (passed/failed) for specific scenarios. Create query functions to check if a scenario exists in the cache and retrieve its status. Add functionality to get all failed scenarios, all passed scenarios, or all cached scenarios. Include a timestamp update when the cache is modified. Implement cache validation to detect corruption and handle version mismatches.

## 4. Integrate Cache with Test Runner [done]
### Dependencies: None
### Description: Modify the test runner to store results in the cache and support rerunning failed tests
### Details:
Update the test runner to record test results in the cache after each scenario execution. Implement the '--rerun-failed' command line option that filters discovered scenarios against cached failures. Ensure the cache is properly updated after reruns. Add logic to detect when a test that previously failed now passes and update the cache accordingly.

## 5. Add Cache Management Commands [done]
### Dependencies: None
### Description: Implement commands to view, clear, and manage the cache
### Details:
Add a '--clear-cache' command line option to delete the cache file or reset it to an empty state. Implement a '--cache-info' option to display statistics about the cache (number of passed/failed tests, last run timestamp, etc.). Add functionality to selectively clear parts of the cache (e.g., only failed tests or tests matching a pattern). Ensure all cache management commands have appropriate user feedback.

